 using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Models
{
    public class Book
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public decimal Price { get; set; }
    }

    public class BookstoreContext
    {
        private static List<Book> books = new List<Book>
        {
            new Book { Id = 1, Title = "Book 1", Author = "Author 1", Price = 10.99m },
            new Book { Id = 2, Title = "Book 2", Author = "Author 2", Price = 15.99m },
            new Book { Id = 3, Title = "Book 3", Author = "Author 3", Price = 20.99m },
        };

        public List<Book> Books => books;

        public Book GetBook(int id)
        {
            return books.FirstOrDefault(b => b.Id == id);
        }

        public void AddBook(Book book)
        {
            book.Id = books.Max(b => b.Id) + 1;
            books.Add(book);
        }

        public void UpdateBook(int id, Book book)
        {
            var existingBook = GetBook(id);
            if (existingBook != null)
            {
                existingBook.Title = book.Title;
                existingBook.Author = book.Author;
                existingBook.Price = book.Price;
            }
        }

        public void DeleteBook(int id)
        {
            var existingBook = GetBook(id);
            if (existingBook != null)
            {
                books.Remove(existingBook);
            }
        }
    }
}
namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BooksController : ControllerBase
    {
        private readonly BookstoreContext context;

        public BooksController(BookstoreContext context)
        {
            this.context = context;
        }

        [HttpGet]
        public ActionResult<IEnumerable<Book>> Get()
        {
            return Ok(context.GetBooks());
        }

        [HttpGet]
        [Route("{id}")]
        public ActionResult<Book> Get(int id)
        {
            var book = context.GetBook(id);
            if (book == null)
            {
                return NotFound();
            }

            return Ok(book);
        }

        [HttpPost]
        public ActionResult<Book> Post([FromBody]Book book)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            context.AddBook(book);
            return CreatedAtAction(nameof(Get), new { id = book.Id }, book);
        }

        [HttpPut]
        [Route("{id}")]
        public IActionResult Put(int id, [FromBody]Book book)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var existingBook = context.GetBook(id);
            if (existingBook == null)
            {
                return NotFound();
            }

            context.UpdateBook(id, book);
            return NoContent();
        }

        [HttpDelete]
        [Route("{id}")]
        public IActionResult Delete(int id)
        {
            var existingBook = context.GetBook(id);
            if (existingBook == null)
            {
                return NotFound();
            }

            context.DeleteBook(id);
            return NoContent();
        }
    }
} 